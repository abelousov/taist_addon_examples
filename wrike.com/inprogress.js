// Generated by CoffeeScript 1.7.1
(function() {
  var ACTIVE, CANCELLED, COMPLETED, CustomStates, DEFERRED, inprogressStates, start;
  start = function(_taistApi) {
    var customStates;
    CustomStates.setTaistApi(_taistApi);
    customStates = new CustomStates('In progress', inprogressStates);
    return customStates.render();
  };
  ACTIVE = 0;
  COMPLETED = 1;
  DEFERRED = 2;
  CANCELLED = 3;
  inprogressStates = {
    initial: {
      next: ['inProgress'],
      visibleTo: 'owner',
      possibleTaskStates: [ACTIVE, DEFERRED]
    },
    inProgress: {
      buttonTitle: 'In progress',
      title: 'InProgress',
      visibleTo: 'owner',
      possibleTaskStates: [ACTIVE, DEFERRED],
      targetTaskState: ACTIVE
    }
  };
  CustomStates = (function() {
    var ButtonsBar, FilterPanel, applyStateToInput, applyStateToText, extractStateFromInput, getNormalizedStatePrefix, getTitlePrefix, taistApi, wrikeUtils;

    taistApi = null;

    CustomStates.prototype.states = null;

    CustomStates.prototype.statesGroupName = null;

    CustomStates.setTaistApi = function(ta) {
      taistApi = ta;
      return taistApi.hash.useHashchangeEvent = false;
    };

    function CustomStates(statesGroupName, states) {
      this.statesGroupName = statesGroupName;
      this.states = states;
    }

    CustomStates.prototype.render = function() {
      var buttonsBar, filterPanel;
      buttonsBar = new ButtonsBar(this.states);
      buttonsBar.renderOnCurrentTaskChange();
      filterPanel = new FilterPanel(this.statesGroupName, this.states);
      return filterPanel.renderOnFiltersAppear();
    };

    ButtonsBar = (function() {
      function ButtonsBar(states) {
        this.states = states;
      }

      ButtonsBar.prototype._containerSelector = '.wspace-task-widgets-title-view';

      ButtonsBar.prototype._buttonsToolbarId = 'wrike-taist-toolbar';

      ButtonsBar.prototype._originalToolbarSelector = '.wspace-task-settings-bar';

      ButtonsBar.prototype.renderOnCurrentTaskChange = function() {
        var setTaskIfNotNull;
        setTaskIfNotNull = (function(_this) {
          return function(task) {
            if (task != null) {
              return _this._setTask(task);
            }
          };
        })(this);
        wrikeUtils.onCurrentTaskChange(setTaskIfNotNull);
        return wrikeUtils.onCurrentTaskSave(setTaskIfNotNull);
      };

      ButtonsBar.prototype._setTask = function(task) {
        var currentState;
        this._cleanButtons();
        currentState = extractStateFromInput(this._getTitleInput(), this.states);
        if (currentState.possibleTaskStates.indexOf(task.data.state) >= 0) {
          if (this._stateIsVisibleToMe(task, currentState)) {
            return this._renderButtons(currentState);
          }
        }
      };

      ButtonsBar.prototype._cleanButtons = function() {
        return ($('#' + this._buttonsToolbarId)).remove();
      };

      ButtonsBar.prototype._stateIsVisibleToMe = function(task, state) {
        return ((wrikeUtils.myTaskRoles(task)).indexOf(state.visibleTo)) > -1;
      };

      ButtonsBar.prototype._renderButtonsToolbar = function() {
        var buttonsToolbar, originalToolbar;
        originalToolbar = $(this._originalToolbarSelector);
        buttonsToolbar = originalToolbar.clone();
        buttonsToolbar.empty();
        buttonsToolbar.attr('id', this._buttonsToolbarId);
        originalToolbar.after(buttonsToolbar);
        return buttonsToolbar;
      };

      ButtonsBar.prototype._renderButtons = function(state) {
        var buttonsToolbar, nextStateButton, nextStateName, _i, _len, _ref, _results;
        buttonsToolbar = this._renderButtonsToolbar();
        if (state.next != null) {
          _ref = state.next;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            nextStateName = _ref[_i];
            nextStateButton = this._createStateButton(nextStateName);
            _results.push(buttonsToolbar.append(nextStateButton));
          }
          return _results;
        }
      };

      ButtonsBar.prototype._createStateButton = function(stateName) {
        var button, state;
        state = this.states[stateName];
        return button = $('<a></a>', {
          "class": "wspace-task-settings-button taist-wrike-approval-button",
          text: state.buttonTitle,
          id: 'taist-wrike-approval-' + stateName,
          click: (function(_this) {
            return function() {
              _this._applyStateToCurrentTask(state);
              return false;
            };
          })(this)
        });
      };

      ButtonsBar.prototype._applyStateToCurrentTask = function(state) {
        applyStateToInput(state, this.states, this._getTitleInput());
        if ((state.targetTaskState != null) && wrikeUtils.currentTask().data.state !== state.targetTaskState) {
          return setTimeout((function() {
            $('.wspace-task-widgets-status-view').click();
            return $(".status-icon-" + state.targetTaskState + " span").click();
          }), 500);
        }
      };

      ButtonsBar.prototype._getTitleInput = function() {
        return $("" + this._containerSelector + " textarea");
      };

      return ButtonsBar;

    })();

    extractStateFromInput = function(input, states) {
      var lowerCasedInputText, state, stateName;
      lowerCasedInputText = input.val().toLowerCase();
      for (stateName in states) {
        state = states[stateName];
        if ((lowerCasedInputText.indexOf(getNormalizedStatePrefix(state))) >= 0) {
          return state;
        }
      }
      return states.initial;
    };

    applyStateToInput = function(state, states, input) {
      var currentText;
      currentText = input.val();
      window.curInput = input;
      input.val(applyStateToText(state, states, currentText));
      input.focus();
      $.event.trigger({
        type: 'keypress',
        which: 13
      });
      return input.blur();
    };

    getNormalizedStatePrefix = function(state) {
      return $.trim((getTitlePrefix(state)).toLowerCase());
    };

    applyStateToText = function(statetoApply, states, currentText) {
      var removedPrefix, state, stateName, _i, _len, _ref;
      for (stateName in states) {
        state = states[stateName];
        _ref = [getTitlePrefix(state), getNormalizedStatePrefix(state)];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          removedPrefix = _ref[_i];
          currentText = currentText.replace(removedPrefix, '');
        }
      }
      if (statetoApply != null) {
        currentText = (getTitlePrefix(statetoApply)) + currentText;
      }
      return currentText;
    };

    getTitlePrefix = function(state) {
      return "[" + state.title + "] ";
    };

    FilterPanel = (function() {
      FilterPanel.prototype.states = null;

      FilterPanel.prototype.filterGroupTitle = null;

      function FilterPanel(filterGroupTitle, states) {
        this.filterGroupTitle = filterGroupTitle;
        this.states = states;
      }

      FilterPanel.prototype._filtersPanelSelector = '.wspace-folder-filterpanel-body';

      FilterPanel.prototype._filterGroupClass = "wspace-folder-filterpanel-filterpane wspace-tree-branch-root";

      FilterPanel.prototype._filtersContainerClass = 'wspace-tree-branch';

      FilterPanel.prototype._filterSelectedClass = 'x-btn-pressed';

      FilterPanel.prototype._filtersFoldButtonClass = 'wspace-tree-foldButton';

      FilterPanel.prototype._filtersFoldClass = 'wspace-tree-folded';

      FilterPanel.prototype._searchFieldSelector = '.wspace-folder-mainbar .wrike-field-search input';

      FilterPanel.prototype._filters = null;

      FilterPanel.prototype.renderOnFiltersAppear = function() {
        return taistApi.wait.elementRender(this._filtersPanelSelector, (function(_this) {
          return function(filtersPanel) {
            var filtersContainer;
            filtersContainer = _this._renderFiltersContainer(filtersPanel);
            _this._renderFilters(filtersContainer);
            return _this._setCurrentState();
          };
        })(this));
      };

      FilterPanel.prototype._renderFiltersContainer = function(filtersPanel) {
        var filtersGroup, foldButton, previousFiltersGroup;
        filtersGroup = this._createFiltersGroupDom();
        previousFiltersGroup = filtersPanel.find(this._getSelectorFromClass(this._filterGroupClass)).last();
        previousFiltersGroup.after(filtersGroup);
        foldButton = filtersGroup.find(this._getSelectorFromClass(this._filtersFoldButtonClass));
        foldButton.click((function(_this) {
          return function() {
            return filtersGroup.toggleClass(_this._filtersFoldClass);
          };
        })(this));
        return filtersGroup.find(this._getSelectorFromClass(this._filtersContainerClass));
      };

      FilterPanel.prototype._renderFilters = function(filtersContainer) {
        var filter, state, _, _ref, _results;
        this._filters = [];
        _ref = this.states;
        _results = [];
        for (_ in _ref) {
          state = _ref[_];
          if (state.title != null) {
            filter = this._renderFilter(state);
            this._filters.push(filter);
            _results.push(filtersContainer.append(filter));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      FilterPanel.prototype._setCurrentState = function() {
        return this._updateFilters(extractStateFromInput(this._getSearchField(), this.states), false);
      };

      FilterPanel.prototype._createFiltersGroupDom = function() {
        return $("<div class=\"" + this._filterGroupClass + "\">\n  <div class=\"wspace-tree-plate\">\n    <div class=\"" + this._filtersFoldButtonClass + "\"></div>\n    <div class=\"wspace-tree-title-root\">" + this.filterGroupTitle + "</div>\n  </div>\n  <div class=\"" + this._filtersContainerClass + "\">\n  </div>\n</div>");
      };

      FilterPanel.prototype._getSelectorFromClass = function(classString) {
        var singleClass, singleSelectorsArray;
        singleSelectorsArray = (function() {
          var _i, _len, _ref, _results;
          _ref = classString.split(' ');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            singleClass = _ref[_i];
            _results.push("." + singleClass);
          }
          return _results;
        })();
        return singleSelectorsArray.join();
      };

      FilterPanel.prototype._renderFilter = function(state) {
        var filter;
        filter = this._createFilterDom(state.title);
        return filter.click((function(_this) {
          return function() {
            var targetState;
            targetState = filter.hasClass(_this._filterSelectedClass) ? null : state;
            _this._updateFilters(targetState, true);
            return false;
          };
        })(this));
      };

      FilterPanel.prototype._createFilterDom = function(filterTitle) {
        return $("<a class=\"wrike-button-checkbox x-btn-noicon\" href=\"#\" style=\"width: auto;\">" + filterTitle + "</a>");
      };

      FilterPanel.prototype._updateFilters = function(state, needUpdateSearchField) {
        var filter, _i, _len, _ref;
        _ref = this._filters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filter = _ref[_i];
          filter.toggleClass(this._filterSelectedClass, (state != null ? state.title : void 0) === filter.text());
        }
        if (needUpdateSearchField) {
          return applyStateToInput(state, this.states, this._getSearchField());
        }
      };

      FilterPanel.prototype._getSearchField = function() {
        return $(this._searchFieldSelector);
      };

      return FilterPanel;

    })();

    wrikeUtils = {
      me: function() {
        return $wrike.user.getUid();
      },
      myTaskRoles: function(task) {
        var condition, role, roleConditions;
        roleConditions = {
          owner: (function(_this) {
            return function() {
              return task.data['responsibleList'].indexOf(_this.me()) >= 0;
            };
          })(this),
          author: (function(_this) {
            return function() {
              return (task.get('author')) === _this.me();
            };
          })(this)
        };
        return (function() {
          var _results;
          _results = [];
          for (role in roleConditions) {
            condition = roleConditions[role];
            if (condition()) {
              _results.push(role);
            }
          }
          return _results;
        })();
      },
      currentTaskView: function() {
        var taskViewId;
        taskViewId = $('.wspace-task-view').attr('id');
        if (taskViewId != null) {
          return window.Ext.ComponentMgr.get(taskViewId);
        }
      },
      currentTask: function() {
        var _ref, _ref1;
        window.ct = (_ref = this.currentTaskView()) != null ? _ref['record'] : void 0;
        return (_ref1 = this.currentTaskView()) != null ? _ref1['record'] : void 0;
      },
      onCurrentTaskChange: function(callback) {
        return taistApi.wait.change(((function(_this) {
          return function() {
            return _this.currentTask();
          };
        })(this)), function(task) {
          if (task != null) {
            return taistApi.wait.once((function() {
              return task.data.title != null;
            }), function() {
              return callback(task);
            });
          }
        });
      },
      onCurrentTaskSave: function(callback) {
        return taistApi.aspect.after($wrike.record.Base.prototype, 'getChanges', function() {
          if (this === wrikeUtils.currentTask()) {
            return callback(this);
          }
        });
      }
    };

    return CustomStates;

  })();
  return {
    start: start
  };
});
