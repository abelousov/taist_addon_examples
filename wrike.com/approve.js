// Generated by CoffeeScript 1.7.1
(function() {
  var WrikeTaskApprover, WrikeTaskFilters, start, states, taistApi, taistWrike;
  taistApi = null;
  start = function(_taistApi) {
    taistApi = _taistApi;
    return (new WrikeTaskApprover()).renderOnCurrentTaskChange();
  };
  states = {
    initial: {
      next: ['onApproval'],
      visibleTo: 'owner'
    },
    onApproval: {
      next: ['approved', 'declined'],
      buttonTitle: 'Send for approval',
      title: 'On Approval',
      visibleTo: 'author'
    },
    approved: {
      buttonTitle: 'Approve',
      title: 'Approved',
      visibleTo: 'owner',
      action: function() {
        return ($('.wspace-task-widgets-status-view-checktip .check-wrap')).click();
      }
    },
    declined: {
      next: ['onApproval'],
      title: 'Declined',
      buttonTitle: 'Decline',
      visibleTo: 'owner'
    }
  };
  WrikeTaskApprover = (function() {
    function WrikeTaskApprover() {}

    WrikeTaskApprover.prototype._containerSelector = '.wspace-task-widgets-title-view';

    WrikeTaskApprover.prototype._buttonsToolbarId = 'wrike-taist-toolbar';

    WrikeTaskApprover.prototype._originalToolbarSelector = '.wspace-task-settings-bar';

    WrikeTaskApprover.prototype.renderOnCurrentTaskChange = function() {
      var setTaskIfNotNull;
      setTaskIfNotNull = (function(_this) {
        return function(task) {
          if (task != null) {
            return _this._setTask(task);
          }
        };
      })(this);
      taistWrike.onCurrentTaskChange(setTaskIfNotNull);
      return taistWrike.onCurrentTaskSave(setTaskIfNotNull);
    };

    WrikeTaskApprover.prototype._setTask = function(task) {
      var currentState;
      window.curTask = task;
      taistApi.log('current task: ', task);
      this._cleanButtons();
      currentState = this._defineStateByTask(task);
      if (this._stateIsVisibleToMe(task, currentState)) {
        return this._renderButtons(currentState);
      }
    };

    WrikeTaskApprover.prototype._cleanButtons = function() {
      return ($('#' + this._buttonsToolbarId)).remove();
    };

    WrikeTaskApprover.prototype._defineStateByTask = function(task) {
      var state, stateName, taskTitle;
      taskTitle = task.data['title'];
      for (stateName in states) {
        state = states[stateName];
        if ((taskTitle.indexOf(this._getTitlePrefix(state))) >= 0) {
          return state;
        }
      }
      return states.initial;
    };

    WrikeTaskApprover.prototype._stateIsVisibleToMe = function(task, state) {
      return ((taistWrike.myTaskRoles(task)).indexOf(state.visibleTo)) > -1;
    };

    WrikeTaskApprover.prototype._renderButtonsToolbar = function() {
      var buttonsToolbar, originalToolbar;
      originalToolbar = $(this._originalToolbarSelector);
      buttonsToolbar = originalToolbar.clone();
      buttonsToolbar.empty();
      buttonsToolbar.attr('id', this._buttonsToolbarId);
      originalToolbar.after(buttonsToolbar);
      return buttonsToolbar;
    };

    WrikeTaskApprover.prototype._renderButtons = function(state) {
      var buttonsToolbar, nextStateButton, nextStateName, _i, _len, _ref, _results;
      buttonsToolbar = this._renderButtonsToolbar();
      if (state.next != null) {
        _ref = state.next;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          nextStateName = _ref[_i];
          nextStateButton = this._createStateButton(nextStateName);
          _results.push(buttonsToolbar.append(nextStateButton));
        }
        return _results;
      }
    };

    WrikeTaskApprover.prototype._createStateButton = function(stateName) {
      var button, state;
      state = states[stateName];
      return button = $('<a></a>', {
        "class": "wspace-task-settings-button taist-wrike-approval-button",
        text: state.buttonTitle,
        id: 'taist-wrike-approval-' + stateName,
        click: (function(_this) {
          return function() {
            _this._applyStateToCurrentTask(state);
            return false;
          };
        })(this)
      });
    };

    WrikeTaskApprover.prototype._applyStateToCurrentTask = function(state) {
      this._updateTaskTitle(state);
      return typeof state.action === "function" ? state.action() : void 0;
    };

    WrikeTaskApprover.prototype._updateTaskTitle = function(state) {
      var currentTitle, titleInput;
      titleInput = $("" + this._containerSelector + " textarea");
      currentTitle = titleInput.val();
      titleInput.val(this._applyStateToTitle(currentTitle, state));
      titleInput.focus();
      $.event.trigger({
        type: 'keypress',
        which: 13
      });
      return titleInput.blur();
    };

    WrikeTaskApprover.prototype._applyStateToTitle = function(currentTitle, newState) {
      var state, stateName;
      for (stateName in states) {
        state = states[stateName];
        currentTitle = currentTitle.replace(this._getTitlePrefix(state), '');
      }
      currentTitle = (this._getTitlePrefix(newState)) + currentTitle;
      return currentTitle;
    };

    WrikeTaskApprover.prototype._getTitlePrefix = function(state) {
      return "[" + state.title + "] ";
    };

    return WrikeTaskApprover;

  })();
  WrikeTaskFilters = (function() {
    function WrikeTaskFilters() {}

    WrikeTaskFilters.prototype.filter = 'All';

    WrikeTaskFilters.prototype.cfg = {
      flagTemplate: '<a class="wrike-button-checkbox x-btn-noicon" href="#"></a>',
      taistFiltersContainerId: 'wrike-taist-approval-filters',
      flagsOuterContainerSelector: '.type-selector',
      flagsInnerContainerSelector: '.x-column',
      flagCheckedClass: 'x-btn-pressed',
      streamTaskSelector: '.stream-task-entry',
      streamViewButtonSelector: '.wspace_header_buttonStreamView'
    };

    WrikeTaskFilters.prototype.renderOnFiltersAppear = function() {
      if (window.location.hash.match(/stream/)) {
        this.renderFlags();
        return this.filterTasks();
      }
    };

    WrikeTaskFilters.prototype.renderFlags = function() {
      var flag, flags, flagsContainer, originalFlags, self, state, _, _results;
      if ($('#' + this.cfg.taistFiltersContainerId).length) {
        return;
      }
      originalFlags = $(this.cfg.flagsOuterContainerSelector);
      flags = originalFlags.clone();
      flags.attr('id', this.cfg.taistFiltersContainerId);
      flagsContainer = flags.find(this.cfg.flagsInnerContainerSelector);
      flagsContainer.empty();
      originalFlags.after(flags);
      self = this;
      _results = [];
      for (_ in states) {
        state = states[_];
        flag = $(self.cfg.flagTemplate);
        flag.text(state.titleTag || 'All');
        flagsContainer.append(flag);
        if (this.filter === flag.text()) {
          flag.addClass(self.cfg.flagCheckedClass);
        }
        _results.push(flag.on('click', function() {
          flagsContainer.find('a').removeClass(self.cfg.flagCheckedClass);
          $(this).addClass(self.cfg.flagCheckedClass);
          self.filter = $(this).text();
          self.filterTasks();
          return false;
        }));
      }
      return _results;
    };

    WrikeTaskFilters.prototype.filterTasks = function() {
      return $(this.cfg.streamTaskSelector).each((function(_this) {
        return function(i, element) {
          return console.log('filter tasks here');
        };
      })(this));
    };

    return WrikeTaskFilters;

  })();
  window.taistWrike = taistWrike = {
    me: function() {
      return $wrike.user.getUid();
    },
    myTaskRoles: function(task) {
      var condition, role, roleConditions;
      roleConditions = {
        owner: (function(_this) {
          return function() {
            return task.data['responsibleList'].indexOf(_this.me()) >= 0;
          };
        })(this),
        author: (function(_this) {
          return function() {
            return (task.get('author')) === _this.me();
          };
        })(this)
      };
      return (function() {
        var _results;
        _results = [];
        for (role in roleConditions) {
          condition = roleConditions[role];
          if (condition()) {
            _results.push(role);
          }
        }
        return _results;
      })();
    },
    currentTaskView: function() {
      var taskViewId;
      taskViewId = $('.wspace-task-view').attr('id');
      if (taskViewId != null) {
        return window.Ext.ComponentMgr.get(taskViewId);
      }
    },
    currentTask: function() {
      var _ref;
      return (_ref = this.currentTaskView()) != null ? _ref['record'] : void 0;
    },
    onCurrentTaskChange: function(callback) {
      var callbackAfterTaskLoads;
      callbackAfterTaskLoads = function(task) {
        if (task != null) {
          return taistApi.wait.once((function() {
            return task.data.title != null;
          }), function() {
            return callback(task);
          });
        }
      };
      taistApi.wait.change(((function(_this) {
        return function() {
          return _this.currentTask();
        };
      })(this)), callbackAfterTaskLoads);
      return callbackAfterTaskLoads(this.currentTask());
    },
    onCurrentTaskSave: function(callback) {
      return taistApi.aspect.after($wrike.record.Base.prototype, 'getChanges', function() {
        if (this === taistWrike.currentTask()) {
          return callback(this);
        }
      });
    }
  };
  return {
    start: start
  };
});
