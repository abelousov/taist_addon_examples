// Generated by CoffeeScript 1.7.1
(function() {
  var allFilters, applyStateToInput, applyStateToText, approver, extractStateFromInput, getNormalizedStatePrefix, getTitlePrefix, start, states, taistApi, taistWrike;
  taistApi = null;
  start = function(_taistApi) {
    taistApi = _taistApi;
    taistApi.hash.useHashchangeEvent = false;
    approver.renderOnCurrentTaskChange();
    return allFilters.renderOnFiltersAppear();
  };
  states = {
    initial: {
      next: ['onApproval'],
      visibleTo: 'owner'
    },
    onApproval: {
      next: ['approved', 'declined'],
      buttonTitle: 'Send for approval',
      title: 'OnApproval',
      visibleTo: 'author'
    },
    approved: {
      buttonTitle: 'Approve',
      title: 'Approved',
      visibleTo: 'owner',
      action: function() {
        return ($('.wspace-task-widgets-status-view-checktip .check-wrap')).click();
      }
    },
    declined: {
      next: ['onApproval'],
      title: 'Declined',
      buttonTitle: 'Decline',
      visibleTo: 'owner'
    }
  };
  approver = {
    _containerSelector: '.wspace-task-widgets-title-view',
    _buttonsToolbarId: 'wrike-taist-toolbar',
    _originalToolbarSelector: '.wspace-task-settings-bar',
    renderOnCurrentTaskChange: function() {
      var setTaskIfNotNull;
      setTaskIfNotNull = (function(_this) {
        return function(task) {
          if (task != null) {
            return _this._setTask(task);
          }
        };
      })(this);
      taistWrike.onCurrentTaskChange(setTaskIfNotNull);
      return taistWrike.onCurrentTaskSave(setTaskIfNotNull);
    },
    _setTask: function(task) {
      var currentState;
      this._cleanButtons();
      currentState = extractStateFromInput(this._getTitleInput());
      if (this._stateIsVisibleToMe(task, currentState)) {
        return this._renderButtons(currentState);
      }
    },
    _cleanButtons: function() {
      return ($('#' + this._buttonsToolbarId)).remove();
    },
    _stateIsVisibleToMe: function(task, state) {
      return ((taistWrike.myTaskRoles(task)).indexOf(state.visibleTo)) > -1;
    },
    _renderButtonsToolbar: function() {
      var buttonsToolbar, originalToolbar;
      originalToolbar = $(this._originalToolbarSelector);
      buttonsToolbar = originalToolbar.clone();
      buttonsToolbar.empty();
      buttonsToolbar.attr('id', this._buttonsToolbarId);
      originalToolbar.after(buttonsToolbar);
      return buttonsToolbar;
    },
    _renderButtons: function(state) {
      var buttonsToolbar, nextStateButton, nextStateName, _i, _len, _ref, _results;
      buttonsToolbar = this._renderButtonsToolbar();
      if (state.next != null) {
        _ref = state.next;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          nextStateName = _ref[_i];
          nextStateButton = this._createStateButton(nextStateName);
          _results.push(buttonsToolbar.append(nextStateButton));
        }
        return _results;
      }
    },
    _createStateButton: function(stateName) {
      var button, state;
      state = states[stateName];
      return button = $('<a></a>', {
        "class": "wspace-task-settings-button taist-wrike-approval-button",
        text: state.buttonTitle,
        id: 'taist-wrike-approval-' + stateName,
        click: (function(_this) {
          return function() {
            _this._applyStateToCurrentTask(state);
            return false;
          };
        })(this)
      });
    },
    _applyStateToCurrentTask: function(state) {
      applyStateToInput(state, this._getTitleInput());
      return typeof state.action === "function" ? state.action() : void 0;
    },
    _getTitleInput: function() {
      return $("" + this._containerSelector + " textarea");
    }
  };
  extractStateFromInput = function(input) {
    var lowerCasedInputText, state, stateName;
    lowerCasedInputText = input.val().toLowerCase();
    for (stateName in states) {
      state = states[stateName];
      if ((lowerCasedInputText.indexOf(getNormalizedStatePrefix(state))) >= 0) {
        return state;
      }
    }
    return states.initial;
  };
  applyStateToInput = function(state, input) {
    var currentText;
    currentText = input.val();
    window.curInput = input;
    input.val(applyStateToText(state, currentText));
    input.focus();
    $.event.trigger({
      type: 'keypress',
      which: 13
    });
    return input.blur();
  };
  getNormalizedStatePrefix = function(state) {
    return $.trim((getTitlePrefix(state)).toLowerCase());
  };
  applyStateToText = function(statetoApply, currentText) {
    var removedPrefix, state, stateName, _i, _len, _ref;
    for (stateName in states) {
      state = states[stateName];
      _ref = [getTitlePrefix(state), getNormalizedStatePrefix(state)];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        removedPrefix = _ref[_i];
        currentText = currentText.replace(removedPrefix, '');
      }
    }
    if (statetoApply != null) {
      currentText = (getTitlePrefix(statetoApply)) + currentText;
    }
    return currentText;
  };
  getTitlePrefix = function(state) {
    return "[" + state.title + "]";
  };
  allFilters = {
    _filtersPanelSelector: '.wspace-folder-filterpanel-body',
    _filterGroupClass: "wspace-folder-filterpanel-filterpane wspace-tree-branch-root",
    _filtersContainerClass: 'wspace-tree-branch',
    _filterSelectedClass: 'x-btn-pressed',
    _filtersFoldButtonClass: 'wspace-tree-foldButton',
    _filtersFoldClass: 'wspace-tree-folded',
    _searchFieldSelector: '.wspace-folder-mainbar .wrike-field-search input',
    _filters: null,
    renderOnFiltersAppear: function() {
      return taistApi.wait.elementRender(this._filtersPanelSelector, (function(_this) {
        return function(filtersPanel) {
          var filtersContainer;
          filtersContainer = _this._renderFiltersContainer(filtersPanel);
          _this._renderFilters(filtersContainer);
          return _this._setCurrentState();
        };
      })(this));
    },
    _renderFiltersContainer: function(filtersPanel) {
      var filtersGroup, foldButton, previousFiltersGroup;
      filtersGroup = this._createFiltersGroupDom();
      previousFiltersGroup = filtersPanel.find(this._getSelectorFromClass(this._filterGroupClass)).last();
      previousFiltersGroup.after(filtersGroup);
      foldButton = filtersGroup.find(this._getSelectorFromClass(this._filtersFoldButtonClass));
      foldButton.click((function(_this) {
        return function() {
          return filtersGroup.toggleClass(_this._filtersFoldClass);
        };
      })(this));
      return filtersGroup.find(this._getSelectorFromClass(this._filtersContainerClass));
    },
    _renderFilters: function(filtersContainer) {
      var filter, state, _, _results;
      this._filters = [];
      _results = [];
      for (_ in states) {
        state = states[_];
        if (state.title != null) {
          filter = this._renderFilter(state);
          this._filters.push(filter);
          _results.push(filtersContainer.append(filter));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    _setCurrentState: function() {
      return this._updateFilters(extractStateFromInput(this._getSearchField()), false);
    },
    _createFiltersGroupDom: function() {
      return $("<div class=\"" + this._filterGroupClass + "\">\n	<div class=\"wspace-tree-plate\">\n		<div class=\"" + this._filtersFoldButtonClass + "\"></div>\n		<div class=\"wspace-tree-title-root\">Approval</div>\n	</div>\n	<div class=\"" + this._filtersContainerClass + "\">\n	</div>\n</div>");
    },
    _getSelectorFromClass: function(classString) {
      var singleClass, singleSelectorsArray;
      singleSelectorsArray = (function() {
        var _i, _len, _ref, _results;
        _ref = classString.split(' ');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          singleClass = _ref[_i];
          _results.push("." + singleClass);
        }
        return _results;
      })();
      return singleSelectorsArray.join();
    },
    _renderFilter: function(state, allFilters) {
      var filter;
      filter = this._createFilterDom(state.title);
      return filter.click((function(_this) {
        return function() {
          var targetState;
          targetState = filter.hasClass(_this._filterSelectedClass) ? null : state;
          _this._updateFilters(targetState, true);
          return false;
        };
      })(this));
    },
    _createFilterDom: function(filterTitle) {
      return $("<a class=\"wrike-button-checkbox x-btn-noicon\" href=\"#\" style=\"width: auto;\">" + filterTitle + "</a>");
    },
    _updateFilters: function(state, needUpdateSearchField) {
      var filter, _i, _len, _ref;
      _ref = this._filters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        filter = _ref[_i];
        filter.toggleClass(this._filterSelectedClass, (state != null ? state.title : void 0) === filter.text());
      }
      if (needUpdateSearchField) {
        return applyStateToInput(state, this._getSearchField());
      }
    },
    _getSearchField: function() {
      var field;
      field = $(this._searchFieldSelector);
      if (window.foundSearchFields == null) {
        window.foundSearchFields = [];
      }
      window.foundSearchFields.push(field);
      return field;
    }
  };
  window.taistWrike = taistWrike = {
    me: function() {
      return $wrike.user.getUid();
    },
    myTaskRoles: function(task) {
      var condition, role, roleConditions;
      roleConditions = {
        owner: (function(_this) {
          return function() {
            return task.data['responsibleList'].indexOf(_this.me()) >= 0;
          };
        })(this),
        author: (function(_this) {
          return function() {
            return (task.get('author')) === _this.me();
          };
        })(this)
      };
      return (function() {
        var _results;
        _results = [];
        for (role in roleConditions) {
          condition = roleConditions[role];
          if (condition()) {
            _results.push(role);
          }
        }
        return _results;
      })();
    },
    currentTaskView: function() {
      var taskViewId;
      taskViewId = $('.wspace-task-view').attr('id');
      if (taskViewId != null) {
        return window.Ext.ComponentMgr.get(taskViewId);
      }
    },
    currentTask: function() {
      var _ref;
      return (_ref = this.currentTaskView()) != null ? _ref['record'] : void 0;
    },
    onCurrentTaskChange: function(callback) {
      return taistApi.wait.change(((function(_this) {
        return function() {
          return _this.currentTask();
        };
      })(this)), function(task) {
        if (task != null) {
          return taistApi.wait.once((function() {
            return task.data.title != null;
          }), function() {
            return callback(task);
          });
        }
      });
    },
    onCurrentTaskSave: function(callback) {
      return taistApi.aspect.after($wrike.record.Base.prototype, 'getChanges', function() {
        if (this === taistWrike.currentTask()) {
          return callback(this);
        }
      });
    }
  };
  return {
    start: start
  };
});
