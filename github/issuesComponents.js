// Generated by CoffeeScript 1.7.1
(function() {
  var createComponentsDropdown, createIssueForm, editIssueForm, githubUtils, issuesList, settingsForm, start, storage, utils;
  utils = null;
  start = function(utilities, entryPoint) {
    utils = utilities;
    return storage.init(function() {
      var currentPage;
      settingsForm.renderOnSettingsPageDisplay();
      if (storage.componentsEnabled() && storage.getComponents().length > 0) {
        currentPage = (function() {
          switch (entryPoint) {
            case 'editIssue':
              return editIssueForm;
            case 'createIssue':
              return createIssueForm;
            case 'showIssues':
              return issuesList;
          }
        })();
        return currentPage != null ? currentPage.render() : void 0;
      }
    });
  };
  settingsForm = {
    _editor: null,
    _componentsTextArea: null,
    _enabledCheckbox: null,
    _requiredCheckbox: null,
    renderOnSettingsPageDisplay: function() {
      return githubUtils.addSettingsItemWhenSettingsPageRenders('Components', (function(_this) {
        return function() {
          return _this._renderEditor();
        };
      })(this));
    },
    _renderEditor: function() {
      var saveButton, sel, _ref;
      this._editor = $(this._editorTemplate);
      _ref = (function() {
        var _i, _len, _ref, _results;
        _ref = ['textarea', '.componentsEnabled', '.componentRequired', 'button'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sel = _ref[_i];
          _results.push(this._editor.find(sel));
        }
        return _results;
      }).call(this), this._componentsTextArea = _ref[0], this._enabledCheckbox = _ref[1], this._requiredCheckbox = _ref[2], saveButton = _ref[3];
      this._componentsTextArea.val(this._getComponentsValueToDisplay());
      this._enabledCheckbox.prop('checked', storage.componentsEnabled());
      this._requiredCheckbox.prop('checked', storage.componentRequired());
      saveButton.click((function(_this) {
        return function(e) {
          e.preventDefault();
          return _this._saveComponentsData();
        };
      })(this));
      return this._editor;
    },
    _getComponentsValueToDisplay: function() {
      var comp, componentStrings;
      componentStrings = (function() {
        var _i, _len, _ref, _results;
        _ref = storage.getComponents();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          comp = _ref[_i];
          _results.push([comp.id, comp.name, comp.responsible].join(','));
        }
        return _results;
      })();
      return componentStrings.join('\n');
    },
    _saveComponentsData: function() {
      var settingsToSave;
      settingsToSave = {
        enabled: this._enabledCheckbox.prop('checked'),
        required: this._requiredCheckbox.prop('checked'),
        components: this._componentsTextArea.val()
      };
      return storage.saveSettings(settingsToSave, (function(_this) {
        return function(err) {
          return _this._displaySaveResult(err);
        };
      })(this));
    },
    _displaySaveResult: function(err) {
      var color, message, success, text, _ref;
      success = err == null;
      _ref = success ? ['Saved successfully', 'green'] : ['Error: ', 'red'], text = _ref[0], color = _ref[1];
      (this._editor.find('#componentSaveResult')).css('color', color).text(text);
      message = success ? '' : err.message + ' <a id="componentsJsonExample" href="#">Show example</a>';
      console.log({
        err: err
      });
      console.log('message: ', message);
      (this._editor.find('#componentSaveResultContents')).html(message);
      if (!success) {
        return this._displayJsonExample();
      }
    },
    _displayJsonExample: function() {
      return (this._editor.find('#componentsJsonExample')).click((function(_this) {
        return function() {
          _this._componentsTextArea.val(_this._getComponentsExample() + _this._componentsTextArea.val());
          return false;
        };
      })(this));
    },
    _getComponentsExample: function() {
      return '=== Example:\n1,Authorization,fortknoxguard\n2,User manual,docsguru\n=== End of example\n\n';
    },
    _editorTemplate: '<div class="tab-content"> <div class="boxed-group"> <span class="boxed-group boxed-group-action"> <label><input class="componentSettingsCheckbox componentsEnabled" type="checkbox">Enabled</label> <label><input class="componentSettingsCheckbox componentRequired" type="checkbox">Required in task</label> </span> <h3>Edit components</h3> <div class="boxed-group-inner"> <textarea rows="20" class="componentsEditTextarea"></textarea> <button type="submit" class="button primary componentsSaveButton">Save</button> <span> <span id="componentSaveResult"></span> <span id="componentSaveResultContents"></span> </span> </div> </div> </div>'
  };
  createIssueForm = {
    _widget: null,
    _componentsDropdown: null,
    _required: function() {
      return storage.componentRequired();
    },
    render: function() {
      return utils.wait.elementRender('.assignee.infobar-widget', (function(_this) {
        return function(nextWidget) {
          _this._renderWidget(nextWidget);
          _this._addCheckForRequiredComponent();
          _this._changeAssigneeOnComponentChange();
          return ($(_this._saveButtonSelector)).click(function() {
            return _this._onSave();
          });
        };
      })(this));
    },
    _renderWidget: function(nextWidget) {
      this._widget = $(this._getWidgetTemplate());
      nextWidget.prepend(this._widget);
      this._componentsDropdown = createComponentsDropdown(storage.componentRequired());
      return this._componentsDropdown.renderTo(this._widget.find('.dropdownContainer'));
    },
    _addCheckForRequiredComponent: function() {
      var updateRequiredWarning;
      if (this._required()) {
        updateRequiredWarning = (function(_this) {
          return function() {
            return _this._widget[_this._componentsDropdown.getSelectedComponent() != null ? 'removeClass' : 'addClass']('componentRequiredWarning');
          };
        })(this);
        this._componentsDropdown.onChange(updateRequiredWarning);
        return updateRequiredWarning();
      }
    },
    _changeAssigneeOnComponentChange: function() {
      var assigneeWidget;
      assigneeWidget = $('.js-composer-assignee-picker');
      return this._componentsDropdown.onChange(function(componentId) {
        var findDropdown, openWidgetButton;
        openWidgetButton = assigneeWidget.find(".octicon-gear");
        openWidgetButton.click();
        findDropdown = function() {
          return assigneeWidget.find('.select-menu-modal-holder');
        };
        return utils.wait.once((function() {
          return findDropdown().length > 0;
        }), function() {
          var component, responsible, responsibleRadioButton, _ref;
          component = storage.getComponent(componentId);
          responsible = (_ref = component != null ? component.responsible : void 0) != null ? _ref : '';
          responsibleRadioButton = assigneeWidget.find("input[type=\"radio\"][value=\"" + responsible + "\"]");
          if (responsibleRadioButton.length > 0) {
            return responsibleRadioButton.click();
          } else {
            (assigneeWidget.find('.js-menu-close')).click();
            if (component != null) {
              return setTimeout((function() {
                return alert("Error: user '" + responsible + "' specified as responsible for component '" + component.name + "' not found in repository. Please check components settings");
              }), 500);
            }
          }
        });
      });
    },
    _onSave: function() {
      var fadeDuration;
      if (this._componentsDropdown.getSelectedComponent() == null) {
        if (this._required()) {
          fadeDuration = 400;
          this._widget.fadeOut(fadeDuration).fadeIn(fadeDuration);
          return false;
        } else {

        }
      } else {
        return storage.storeComponentForNewTask(this._componentsDropdown.getSelectedComponent(), function() {});
      }
    },
    _saveButtonSelector: '.form-actions .button.primary',
    _getWidgetTemplate: function() {
      return "<span class=\"componentSelectionWidget infobar-widget text " + (this._required() ? 'componentRequiredWarning' : void 0) + "\"></\n  <label>Component: </label><span class=\"dropdownContainer\"></span>\n</span>";
    }
  };
  createComponentsDropdown = function(required) {
    var component, componentOptionsArray, components, dropdownContents, emptyComponentId;
    emptyComponentId = 'NOT_SET';
    components = [
      {
        id: emptyComponentId,
        name: '---'
      }
    ].concat(storage.getComponents());
    componentOptionsArray = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        _results.push("<option value=\"" + component.id + "\">" + component.name + "</option>");
      }
      return _results;
    })();
    dropdownContents = $("<select class=\"componentSelectDropdown\">" + componentOptionsArray + "</select>");
    return {
      renderTo: function(container) {
        return container.append(dropdownContents);
      },
      getSelectedComponent: function() {
        var selectedValue;
        if ((selectedValue = dropdownContents.val()) === emptyComponentId) {
          return null;
        } else {
          return selectedValue;
        }
      },
      setSelectedComponent: function(componentId) {
        dropdownContents.val(componentId != null ? componentId : emptyComponentId);
        if (required && (componentId != null)) {
          return (dropdownContents.find("[value=\"" + emptyComponentId + "\"]")).remove();
        }
      },
      onChange: function(handler) {
        return dropdownContents.change((function(_this) {
          return function() {
            return handler(_this.getSelectedComponent());
          };
        })(this));
      }
    };
  };
  editIssueForm = {
    _widget: null,
    _componentsDropdown: null,
    render: function() {
      return this._assignComponentToFreshlyCreatedTask((function(_this) {
        return function() {
          _this._renderWidget();
          return _this._setCurrentComponent(function() {
            return _this._listenToComponentChangeAndSave();
          });
        };
      })(this));
    },
    _assignComponentToFreshlyCreatedTask: function(callback) {
      return storage.assignComponentIfTaskJustCreated(this._getCurrentTaskId(), function() {
        return callback();
      });
    },
    _renderWidget: function() {
      this._widget = $(this._widgetTemplate);
      $(this._previousWidgetSelector).after(this._widget);
      this._componentsDropdown = createComponentsDropdown(storage.componentRequired());
      return this._componentsDropdown.renderTo(this._widget.find('.dropdownContainer'));
    },
    _setCurrentComponent: function(callback) {
      return storage.getComponentForTask(this._getCurrentTaskId(), (function(_this) {
        return function(componentId) {
          _this._componentsDropdown.setSelectedComponent(componentId);
          return callback();
        };
      })(this));
    },
    _listenToComponentChangeAndSave: function() {
      return this._componentsDropdown.onChange((function(_this) {
        return function(newComponentId) {
          return storage.assignComponentToTask(_this._getCurrentTaskId(), newComponentId, function() {});
        };
      })(this));
    },
    _previousWidgetSelector: '.discussion-sidebar-item.sidebar-labels',
    _widgetTemplate: "<div class=\"discussion-sidebar-item sidebar-milestone\">\n<div class=\"select-menu js-menu-container js-select-menu is-showing-clear-item\">\n  <h3 class=\"discussion-sidebar-heading\">\n    Component\n  </h3>\n</div>\n\n<span class=\"js-milestone-infobar-item-wrapper\">\n    <span class=\"dropdownContainer\"></span>\n</span>\n</div>",
    _getCurrentTaskId: function() {
      return location.pathname.match(/\d+(?=$)/)[0];
    }
  };
  storage = {
    componentsEnabled: function() {
      return this._settings.enabled;
    },
    componentRequired: function() {
      return this._settings.required;
    },
    _getOwnerAndRepo: function() {
      return location.pathname.match(new RegExp('^/(\\w+/\\w+)'))[1];
    },
    _settings: null,
    init: function(callback) {
      utils.companyData.setCompanyKey(this._getOwnerAndRepo());
      return utils.companyData.get('settings', (function(_this) {
        return function(settings) {
          _this._settings = settings != null ? settings : {};
          return callback();
        };
      })(this));
    },
    getComponents: function() {
      var _ref;
      return (_ref = this._settings.components) != null ? _ref : [];
    },
    getComponent: function(componentId) {
      var comp, _i, _len, _ref;
      _ref = this._settings.components;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        comp = _ref[_i];
        if (comp.id === componentId) {
          return comp;
        }
      }
    },
    saveSettings: function(settingsToSave, callback) {
      var errorMessage;
      this._settings.enabled = settingsToSave.enabled;
      this._settings.required = settingsToSave.required;
      if (this._settings.enabled) {
        errorMessage = this._setComponentsFromString(settingsToSave.components);
        if (errorMessage != null) {
          callback(new Error(errorMessage));
          return;
        }
      }
      return utils.companyData.set('settings', this._settings, function() {
        return callback();
      });
    },
    _setComponentsFromString: function(componentsString) {
      var compString, componentParts, newComponents, stringNumber, _i, _len, _ref;
      newComponents = [];
      if (componentsString.length === 0) {
        return 'empty components list';
      }
      _ref = componentsString.trim().split('\n');
      for (stringNumber = _i = 0, _len = _ref.length; _i < _len; stringNumber = ++_i) {
        compString = _ref[stringNumber];
        componentParts = compString.trim().split(',');
        if (componentParts.length !== 3) {
          return "string " + (stringNumber + 1) + ": data should be a list of strings \"component_id,component_name,responsible_account\"";
        } else {
          newComponents.push({
            id: componentParts[0],
            name: componentParts[1],
            responsible: componentParts[2]
          });
        }
      }
      this._settings.components = newComponents;
      return null;
    },
    storeComponentForNewTask: function(componentId, callback) {
      return utils.userData.set('componentForNewTask', componentId, function() {
        return callback();
      });
    },
    _deleteComponentForNewTask: function(callback) {
      return utils.userData["delete"]('componentForNewTask', function() {
        return callback();
      });
    },
    _getComponentForNewTask: function(callback) {
      return utils.userData.get('componentForNewTask', function(componentId) {
        return callback(componentId);
      });
    },
    assignComponentIfTaskJustCreated: function(taskId, callback) {
      return this._getComponentForNewTask((function(_this) {
        return function(componentId) {
          utils.log('componentId: ', {
            componentId: componentId
          });
          if (componentId != null) {
            return _this.assignComponentToTask(taskId, componentId, function() {
              return _this._deleteComponentForNewTask(function() {
                return callback();
              });
            });
          } else {
            return callback();
          }
        };
      })(this));
    },
    assignComponentToTask: function(taskId, componentId, callback) {
      return utils.companyData.setPart('assignedComponents', taskId, componentId, function() {
        return callback();
      });
    },
    getComponentForTask: function(taskId, callback) {
      return utils.companyData.getPart('assignedComponents', taskId, function(componentId) {
        return callback(componentId);
      });
    },
    getAssignedComponents: function(callback) {
      return utils.companyData.get('assignedComponents', function(assignedComponents) {
        return callback(assignedComponents);
      });
    }
  };
  issuesList = {
    _assignedComponents: null,
    _widget: null,
    _currentComponent: null,
    render: function() {
      return storage.getAssignedComponents((function(_this) {
        return function(assignedComponents) {
          _this._assignedComponents = assignedComponents;
          return utils.wait.elementRender('.issues-list', function() {
            _this._renderComponentFilter();
            return _this._filterIssuesByComponent();
          });
        };
      })(this));
    },
    _renderComponentFilter: function() {
      var sortingSelect;
      sortingSelect = $('.js-issues-sort');
      this._widget = $(this._widgetTemplate);
      this._componentsDropdown = createComponentsDropdown(false);
      this._componentsDropdown.renderTo(this._widget.find('.dropdownContainer'));
      this._componentsDropdown.setSelectedComponent(this._currentComponent);
      this._componentsDropdown.onChange((function(_this) {
        return function(selectedComponent) {
          _this._currentComponent = selectedComponent;
          return _this._filterIssuesByComponent();
        };
      })(this));
      return sortingSelect.before(this._widget);
    },
    _widgetTemplate: "<span class=\"componentFilterWidget\"></\n  <label>Component: </label><span class=\"dropdownContainer\"></span>\n</span>",
    _filterIssuesByComponent: function() {
      var issueDOM, issueId, jqIssue, _i, _len, _ref, _results;
      _ref = $('.issue-list-item');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        issueDOM = _ref[_i];
        issueId = issueDOM.id.substring('issue_'.length);
        jqIssue = $(issueDOM);
        if ((this._currentComponent != null) && this._assignedComponents[issueId] !== this._currentComponent) {
          _results.push(jqIssue.hide());
        } else {
          _results.push(jqIssue.show());
        }
      }
      return _results;
    }
  };
  githubUtils = {
    addSettingsItemWhenSettingsPageRenders: function(itemName, contentsRenderer) {
      var _formatLinkAsSelected;
      utils.wait.elementRender('#repo-settings .menu', function(menuContainer) {
        var newLink;
        newLink = $("<a href=\"#\">" + itemName + "</a>");
        menuContainer.append(($('<li></li>')).append(newLink));
        return newLink.click(function() {
          var contentsContainer;
          _formatLinkAsSelected(newLink);
          contentsContainer = $('.repo-settings-content');
          contentsContainer.empty();
          contentsContainer.append(contentsRenderer());
          return false;
        });
      });
      return _formatLinkAsSelected = function(newLink) {
        var previousSelectedLink, property, selPropertyValue, selectedFormatProperties, _i, _len, _results;
        selectedFormatProperties = ['font-weight', 'border-left', 'color'];
        previousSelectedLink = $('.js-selected-navigation-item.selected');
        _results = [];
        for (_i = 0, _len = selectedFormatProperties.length; _i < _len; _i++) {
          property = selectedFormatProperties[_i];
          selPropertyValue = previousSelectedLink.css(property);
          previousSelectedLink.css(property, newLink.css(property));
          _results.push(newLink.css(property, selPropertyValue));
        }
        return _results;
      };
    }
  };
  return {
    start: start
  };
});
