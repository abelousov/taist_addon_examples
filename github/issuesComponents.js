// Generated by CoffeeScript 1.7.1
(function() {
  var createIssueForm, githubUtils, issuesList, settingsForm, start, storage, utils;
  utils = null;
  start = function(utilities, entryPoint) {
    utils = utilities;
    return storage.init(function() {
      var currentPage;
      currentPage = (function() {
        switch (entryPoint) {
          case 'settings':
            return settingsForm;
          case 'editIssue':
            return editIssueForm;
          case 'createIssue':
            return createIssueForm;
          case 'showIssues':
            return issuesList;
        }
      })();
      return currentPage.render();
    });
  };
  settingsForm = {
    _editor: null,
    _compontentsTextArea: null,
    render: function() {
      return githubUtils.addSettingsItem('Components', this._getEditorRenderer());
    },
    _getEditorRenderer: function() {
      return (function(_this) {
        return function() {
          var saveButton;
          _this._editor = $(_this._editorTemplate);
          _this._componentsTextArea = _this._editor.find('textarea');
          saveButton = _this._editor.find('button');
          _this._componentsTextArea.val(_this._getComponentsValueToDisplay());
          saveButton.click(function(e) {
            e.preventDefault();
            return _this._saveComponentsData(_this._editor);
          });
          return _this._editor;
        };
      })(this);
    },
    _getComponentsValueToDisplay: function() {
      var comp, componentStrings;
      componentStrings = (function() {
        var _i, _len, _ref, _results;
        _ref = storage.getComponents();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          comp = _ref[_i];
          _results.push([comp.id, comp.name, comp.responsible].join(','));
        }
        return _results;
      })();
      return componentStrings.join('\n');
    },
    _saveComponentsData: function(editor) {
      var newComponentsData;
      this.editor = editor;
      newComponentsData = this._componentsTextArea.val();
      return storage.setComponentsData(newComponentsData, (function(_this) {
        return function(err) {
          if (err != null) {
            _this._displaySaveResult(false, err.message + ' <a id="componentsJsonExample" href="#">Show example</a>');
            return _this._renderJsonExample();
          } else {
            return _this._displaySaveResult(err == null, err != null ? err.message : void 0);
          }
        };
      })(this));
    },
    _displaySaveResult: function(isSuccessful, message) {
      var color, text, _ref;
      _ref = isSuccessful ? ['Saved successfully', 'green'] : ['Error', 'red'], text = _ref[0], color = _ref[1];
      (this._editor.find('#componentSaveResult')).css('color', color).text(text);
      return (this._editor.find('#componentSaveResultContents')).html((message != null ? ": " + message : ''));
    },
    _renderJsonExample: function() {
      return (this._editor.find('#componentsJsonExample')).click((function(_this) {
        return function() {
          _this._componentsTextArea.val(_this._getComponentsExample() + _this._componentsTextArea.val());
          return false;
        };
      })(this));
    },
    _getComponentsExample: function() {
      return '=== Example:\n\n1,Authorization,fortknoxguard\n2,User manual,docsguru\n\n=== End of example\n\n';
    },
    _editorTemplate: '<div class="tab-content"> <div class="boxed-group"> <h3>Edit components</h3> <div class="boxed-group-inner"> <textarea rows="20" class="componentsEditTextarea"></textarea> <button type="submit" class="button primary componentsSaveButton">Save</button><span><span id="componentSaveResult"></span><span id="componentSaveResultContents"></span></span> </div> </div> </div>'
  };
  createIssueForm = {
    render: function() {
      return utils.wait.elementRender('.assignee,infobar-widget', (function(_this) {
        return function(previousWidget) {
          var componentsDropdown, componentsWidget, saveButton;
          componentsWidget = _this._createComponentsWidget();
          previousWidget.after(componentsWidget);
          componentsDropdown = componentsWidget.find('.componentSelectDropdown');
          saveButton = $('.form-actions .button.primary');
          return saveButton.click(function() {
            var selectedComponentId;
            selectedComponentId = componentsDropdown.val();
            console.log('selected component: "', selectedComponentId + '"');
            if (selectedComponentId === 'NOT_SET') {
              return false;
            } else {
              return storage.storeComponentForNewTask(selectedComponentId, function() {});
            }
          });
        };
      })(this));
    },
    _createComponentsWidget: function() {
      var component, componentOptionsArray, dropdownContents;
      componentOptionsArray = (function() {
        var _i, _len, _ref, _results;
        _ref = storage.getComponents();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          component = _ref[_i];
          _results.push("<option value=\"" + component.id + "\">" + component.name + "</option>");
        }
        return _results;
      })();
      dropdownContents = $("<span class=\"componentSelectionWidget infobar-widget text\"></\n  <label>Component: </label><select class=\"componentSelectDropdown\"><option value=\"NOT_SET\">---</option>" + componentOptionsArray + "</select>\n</span>");
      return dropdownContents;
    }
  };
  storage = {
    _getOwnerAndRepo: function() {
      return location.pathname.match(new RegExp('^/(\\w+/\\w+)'))[1];
    },
    _components: null,
    init: function(callback) {
      utils.companyData.setCompanyKey(this._getOwnerAndRepo());
      return utils.companyData.get('components', (function(_this) {
        return function(err, componentsData) {
          if (err == null) {
            _this._components = componentsData;
            return callback();
          }
        };
      })(this));
    },
    getComponents: function() {
      return this._components;
    },
    setComponentsData: function(newComponentsValue, callback) {
      var errorMessage;
      errorMessage = this._setComponentsFromString(newComponentsValue);
      if (errorMessage != null) {
        return callback(new Error(errorMessage));
      } else {
        return utils.companyData.set('components', this._components, function(err) {
          if (err == null) {
            return callback(null);
          }
        });
      }
    },
    _setComponentsFromString: function(componentsString) {
      var componentParts, componentString, newComponents, stringNumber, _i, _len, _ref;
      newComponents = [];
      if (componentsString.length === 0) {
        return 'empty components list';
      }
      stringNumber = 0;
      _ref = componentsString.trim().split('\n');
      for (stringNumber = _i = 0, _len = _ref.length; _i < _len; stringNumber = ++_i) {
        componentString = _ref[stringNumber];
        componentParts = componentString.trim().split(',');
        if (componentParts.length !== 3) {
          return 'string ' + (stringNumber + 1) + ': data should be a list of strings "component_id,component_name,responsible_account"';
          newComponents.push({
            id: componentParts[0],
            name: componentParts[1],
            responsible: componentParts[2]
          });
        }
      }
      return this._components = newComponents;
    },
    storeComponentForNewTask: function(componentId, callback) {
      return utils.companyData.set('componentForNewTask', componentId, function(err) {
        if (err == null) {
          return callback();
        }
      });
    }
  };
  issuesList = {
    render: function() {
      return console.log('rendered issues list');
    }
  };
  githubUtils = {
    addSettingsItem: function(itemName, contentsRenderer) {
      var _formatLinkAsSelected;
      utils.wait.elementRender('#repo-settings .menu', function(menuContainer) {
        var newLink;
        newLink = $("<a href=\"#\">" + itemName + "</a>");
        menuContainer.append(($('<li></li>')).append(newLink));
        return newLink.click(function() {
          var contentsContainer;
          _formatLinkAsSelected(newLink);
          contentsContainer = $('.repo-settings-content');
          contentsContainer.empty();
          contentsContainer.append(contentsRenderer());
          return false;
        });
      });
      return _formatLinkAsSelected = function(newLink) {
        var previousSelectedLink, property, selPropertyValue, selectedFormatProperties, _i, _len, _results;
        selectedFormatProperties = ['font-weight', 'border-left', 'color'];
        previousSelectedLink = $('.js-selected-navigation-item.selected');
        _results = [];
        for (_i = 0, _len = selectedFormatProperties.length; _i < _len; _i++) {
          property = selectedFormatProperties[_i];
          selPropertyValue = previousSelectedLink.css(property);
          previousSelectedLink.css(property, newLink.css(property));
          _results.push(newLink.css(property, selPropertyValue));
        }
        return _results;
      };
    }
  };
  return {
    start: start
  };
});
