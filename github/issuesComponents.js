// Generated by CoffeeScript 1.7.1
(function() {
  var componentsDropdown, createIssueForm, editIssueForm, githubUtils, issuesList, settingsForm, start, storage, taistApi;
  taistApi = null;
  start = function(TaistAPI, entryPoint) {
    taistApi = TaistAPI;
    taistApi.haltOnError = true;
    settingsForm.renderOnSettingsPageDisplay();
    return storage.init(function() {
      var currentPage;
      if (storage.componentsEnabled() && storage.getComponents().length > 0) {
        currentPage = (function() {
          switch (entryPoint) {
            case 'editIssue':
              return editIssueForm;
            case 'createIssue':
              return createIssueForm;
            case 'showIssues':
              return issuesList;
          }
        })();
        return currentPage != null ? currentPage.render() : void 0;
      }
    });
  };
  settingsForm = {
    _settingsControl: null,
    _componentsTextArea: null,
    _enabledCheckbox: null,
    _requiredCheckbox: null,
    _saveResults: null,
    renderOnSettingsPageDisplay: function() {
      return githubUtils.addSettingsItem('Components', (function(_this) {
        return function() {
          return {
            headerControls: _this._createHeaderCheckboxes(),
            innerContents: _this._createInnerContents()
          };
        };
      })(this));
    },
    _createHeaderCheckboxes: function() {
      this._enabledCheckbox = this._createHeaderCheckbox("componentsEnabled", storage.componentsEnabled());
      this._requiredCheckbox = this._createHeaderCheckbox("componentRequired", storage.componentRequired());
      return [this._wrapChecboxInLabel(this._enabledCheckbox, "Enabled"), this._wrapChecboxInLabel(this._requiredCheckbox, "Required in task")];
    },
    _createInnerContents: function() {
      var saveButton;
      this._componentsTextArea = $("<textarea rows=\"20\" class=\"componentsEditTextarea\"></textarea>");
      this._componentsTextArea.val(this._getComponentsValueToDisplay());
      saveButton = $("<button type=\"submit\" class=\"button primary componentsSaveButton\">Save</button>");
      saveButton.click((function(_this) {
        return function() {
          _this._saveComponentsData();
          return false;
        };
      })(this));
      this._saveResults = $(this._saveResultsTemplate);
      return [this._componentsTextArea, saveButton, this._saveResults];
    },
    _createHeaderCheckbox: function(className, checked) {
      return ($("<input class=\"componentSettingsCheckbox " + className + "\" type=\"checkbox\">")).prop('checked', checked);
    },
    _wrapChecboxInLabel: function(checkbox, labelText) {
      return ($("<label>" + labelText + "</label>")).prepend(checkbox);
    },
    _getComponentsValueToDisplay: function() {
      var comp, componentStrings;
      componentStrings = (function() {
        var _i, _len, _ref, _results;
        _ref = storage.getComponents();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          comp = _ref[_i];
          _results.push([comp.id, comp.name, comp.responsible].join(','));
        }
        return _results;
      })();
      return componentStrings.join('\n');
    },
    _saveComponentsData: function() {
      var settingsToSave;
      settingsToSave = {
        enabled: this._enabledCheckbox.prop('checked'),
        required: this._requiredCheckbox.prop('checked'),
        components: this._componentsTextArea.val()
      };
      return storage.saveSettings(settingsToSave, (function(_this) {
        return function(err) {
          return _this._displaySaveResult(err);
        };
      })(this));
    },
    _saveResultsTemplate: "<span>\n  <span id=\"componentSaveResult\"></span>\n  <span id=\"componentSaveResultContents\"></span>\n</span>",
    _displaySaveResult: function(err) {
      var color, message, success, text, _ref;
      success = err == null;
      _ref = success ? ['Saved successfully', 'green'] : ['Error: ', 'red'], text = _ref[0], color = _ref[1];
      (this._saveResults.find('#componentSaveResult')).css('color', color).text(text);
      message = success ? '' : err.message + ' <a id="componentsJsonExample" href="#">Show example</a>';
      (this._saveResults.find('#componentSaveResultContents')).html(message);
      if (!success) {
        return this._displayJsonExample();
      }
    },
    _displayJsonExample: function() {
      return (this._saveResults.find('#componentsJsonExample')).click((function(_this) {
        return function() {
          _this._componentsTextArea.val(_this._getComponentsExample() + _this._componentsTextArea.val());
          return false;
        };
      })(this));
    },
    _getComponentsExample: function() {
      return '=== Example:\n1,Authorization,fortknoxguard\n2,User manual,docsguru\n=== End of example\n\n';
    }
  };
  createIssueForm = {
    _widget: null,
    _componentsDropdown: null,
    _required: function() {
      return storage.componentRequired();
    },
    render: function() {
      return taistApi.wait.elementRender('.assignee.infobar-widget', (function(_this) {
        return function(nextWidget) {
          _this._renderWidget(nextWidget);
          _this._addCheckForRequiredComponent();
          _this._changeAssigneeOnComponentChange();
          return ($(_this._saveButtonSelector)).click(function() {
            return _this._onSave();
          });
        };
      })(this));
    },
    _renderWidget: function(nextWidget) {
      this._widget = $(this._getWidgetTemplate());
      nextWidget.prepend(this._widget);
      this._componentsDropdown = componentsDropdown.create('plain', {
        emptyComponentName: '--',
        preserverEmptyComponent: false
      });
      return this._componentsDropdown.renderTo(this._widget.find('.dropdownContainer'));
    },
    _addCheckForRequiredComponent: function() {
      var updateRequiredWarning;
      if (this._required()) {
        updateRequiredWarning = (function(_this) {
          return function() {
            return _this._widget[_this._componentsDropdown.getSelectedComponent() != null ? 'removeClass' : 'addClass']('componentRequiredWarning');
          };
        })(this);
        this._componentsDropdown.onChange(updateRequiredWarning);
        return updateRequiredWarning();
      }
    },
    _changeAssigneeOnComponentChange: function() {
      var assigneeWidget;
      assigneeWidget = $('.js-composer-assignee-picker');
      return this._componentsDropdown.onChange(function(componentId) {
        var findAssigneeDropdown, openWidgetButton;
        openWidgetButton = assigneeWidget.find(".octicon-gear");
        openWidgetButton.click();
        findAssigneeDropdown = function() {
          return assigneeWidget.find('.select-menu-modal-holder');
        };
        return taistApi.wait.once((function() {
          return findAssigneeDropdown().length > 0;
        }), function() {
          var component, responsible, responsibleRadioButton, _ref;
          component = storage.getComponent(componentId);
          responsible = (_ref = component != null ? component.responsible : void 0) != null ? _ref : '';
          responsibleRadioButton = assigneeWidget.find("input[type=\"radio\"][value=\"" + responsible + "\"]");
          if (responsibleRadioButton.length > 0) {
            return responsibleRadioButton.click();
          } else {
            (assigneeWidget.find('.js-menu-close')).click();
            if (component != null) {
              return setTimeout((function() {
                return alert("Error: user '" + responsible + "' specified as responsible for component '" + component.name + "' not found in repository. Please check components settings");
              }), 500);
            }
          }
        });
      });
    },
    _onSave: function() {
      var fadeDuration;
      if (this._componentsDropdown.getSelectedComponent() == null) {
        if (this._required()) {
          fadeDuration = 400;
          this._widget.fadeOut(fadeDuration).fadeIn(fadeDuration);
          return false;
        } else {

        }
      } else {
        return storage.storeComponentForNewTask(this._componentsDropdown.getSelectedComponent(), function() {});
      }
    },
    _saveButtonSelector: '.form-actions .button.primary',
    _getWidgetTemplate: function() {
      return "<span class=\"componentSelectionWidget infobar-widget text " + (this._required() ? 'componentRequiredWarning' : void 0) + "\"></\n  <label>Component: </label><span class=\"dropdownContainer\"></span>\n</span>";
    }
  };
  componentsDropdown = {
    _emptyComponentValue: 'NOT_SET',
    create: function(type, options) {
      var concreteDropdown;
      concreteDropdown = this._dropdownImplementations[type];
      concreteDropdown.init(this._getComponentsList(options.emptyComponentName), options);
      return this._getDropdownWrapper(concreteDropdown, options.preserverEmptyComponent);
    },
    _getComponentsList: function(emptyComponentName) {
      var comp, componentsList;
      componentsList = (function() {
        var _i, _len, _ref, _results;
        _ref = storage.getComponents();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          comp = _ref[_i];
          _results.push({
            value: comp.id,
            name: comp.name
          });
        }
        return _results;
      })();
      componentsList.unshift({
        value: this._emptyComponentValue,
        name: emptyComponentName
      });
      return componentsList;
    },
    _getDropdownWrapper: function(dropdown, preserverEmptyComponent) {
      return {
        renderTo: function(container) {
          return dropdown.renderTo(container);
        },
        getSelectedComponent: function() {
          var selectedValue;
          if ((selectedValue = dropdown.getValue()) === componentsDropdown._emptyComponentValue) {
            return null;
          } else {
            return selectedValue;
          }
        },
        setSelectedComponent: function(componentId) {
          dropdown.setValue(componentId != null ? componentId : componentsDropdown._emptyComponentValue);
          if (storage.componentRequired() && !preserverEmptyComponent && (componentId != null)) {
            return dropdown.removeOption(componentsDropdown._emptyComponentValue);
          }
        },
        onChange: function(handler) {
          return dropdown.onChange((function(_this) {
            return function() {
              return handler(_this.getSelectedComponent());
            };
          })(this));
        }
      };
    },
    _dropdownImplementations: {
      plain: {
        _plainDropdown: null,
        init: function(componentsList) {
          var componentOptionsArray, option;
          componentOptionsArray = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = componentsList.length; _i < _len; _i++) {
              option = componentsList[_i];
              _results.push("<option value=\"" + option.value + "\">" + option.name + "</option>");
            }
            return _results;
          })();
          return this._plainDropdown = $("<select class=\"componentSelectDropdown\">" + componentOptionsArray + "</select>");
        },
        renderTo: function(container) {
          return container.append(this._plainDropdown);
        },
        getValue: function() {
          return this._plainDropdown.val();
        },
        setValue: function(value) {
          return this._plainDropdown.val(value);
        },
        removeOption: function(optionValue) {
          return (this._plainDropdown.find("[value=\"" + optionValue + "\"]")).remove();
        },
        onChange: function(handler) {
          return this._plainDropdown.change(handler);
        }
      },
      github: {
        _githubDropdown: null,
        init: function(componentsList, options) {
          var _ref;
          return this._githubDropdown = githubUtils.createDropdown((_ref = options.caption) != null ? _ref : '', "Components", componentsList);
        },
        renderTo: function(container) {
          return this._githubDropdown.renderTo(container);
        },
        getValue: function() {
          return this._githubDropdown.getValue();
        },
        setValue: function(value) {
          return this._githubDropdown.setValue(value);
        },
        removeOption: function(optionValue) {
          return this._githubDropdown.removeOption(optionValue);
        },
        onChange: function(handler) {
          return this._githubDropdown.onChange(handler);
        }
      }
    }
  };
  editIssueForm = {
    _widget: null,
    _componentsDropdown: null,
    render: function() {
      return this._assignComponentToFreshlyCreatedTask((function(_this) {
        return function() {
          _this._renderWidget();
          return _this._setCurrentComponent(function() {
            return _this._listenToComponentChangeAndSave();
          });
        };
      })(this));
    },
    _assignComponentToFreshlyCreatedTask: function(callback) {
      return storage.assignComponentIfTaskJustCreated(this._getCurrentTaskId(), function() {
        return callback();
      });
    },
    _renderWidget: function() {
      this._widget = $(this._widgetTemplate);
      $(this._previousWidgetSelector).after(this._widget);
      this._componentsDropdown = componentsDropdown.create('github', {
        emptyComponentName: '-------------------',
        preserverEmptyComponent: true
      });
      return this._componentsDropdown.renderTo(this._widget.find('.dropdownContainer'));
    },
    _setCurrentComponent: function(callback) {
      return storage.getComponentForTask(this._getCurrentTaskId(), (function(_this) {
        return function(componentId) {
          _this._componentsDropdown.setSelectedComponent(componentId);
          return callback();
        };
      })(this));
    },
    _listenToComponentChangeAndSave: function() {
      return this._componentsDropdown.onChange((function(_this) {
        return function(newComponentId) {
          return storage.assignComponentToTask(_this._getCurrentTaskId(), newComponentId, function() {});
        };
      })(this));
    },
    _previousWidgetSelector: '.discussion-sidebar-item.sidebar-labels',
    _widgetTemplate: "<div class=\"discussion-sidebar-item sidebar-milestone\">\n<div class=\"select-menu js-menu-container js-select-menu is-showing-clear-item\">\n  <h3 class=\"discussion-sidebar-heading\">\n    Component\n  </h3>\n</div>\n\n<span class=\"js-milestone-infobar-item-wrapper\">\n    <span class=\"dropdownContainer\"></span>\n</span>\n</div>",
    _getCurrentTaskId: function() {
      return location.pathname.match(/\d+(?=$)/)[0];
    }
  };
  storage = {
    componentsEnabled: function() {
      return this._settings.enabled;
    },
    componentRequired: function() {
      return this._settings.required;
    },
    _getOwnerAndRepo: function() {
      return location.pathname.match(new RegExp('^/(\\w+/\\w+)'))[1];
    },
    _settings: null,
    init: function(callback) {
      taistApi.companyData.setCompanyKey(this._getOwnerAndRepo());
      return taistApi.companyData.get('settings', (function(_this) {
        return function(settings) {
          _this._settings = settings != null ? settings : {};
          return callback();
        };
      })(this));
    },
    getComponents: function() {
      var _ref;
      return (_ref = this._settings.components) != null ? _ref : [];
    },
    getComponent: function(componentId) {
      var comp, _i, _len, _ref;
      _ref = this._settings.components;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        comp = _ref[_i];
        if (comp.id === componentId) {
          return comp;
        }
      }
    },
    saveSettings: function(settingsToSave, callback) {
      var errorMessage;
      this._settings.enabled = settingsToSave.enabled;
      this._settings.required = settingsToSave.required;
      if (this._settings.enabled) {
        errorMessage = this._setComponentsFromString(settingsToSave.components);
        if (errorMessage != null) {
          callback(new Error(errorMessage));
          return;
        }
      }
      return taistApi.companyData.set('settings', this._settings, function() {
        return callback();
      });
    },
    _setComponentsFromString: function(componentsString) {
      var compString, componentParts, newComponents, stringNumber, _i, _len, _ref;
      newComponents = [];
      if (componentsString.length === 0) {
        return 'empty components list';
      }
      _ref = componentsString.trim().split('\n');
      for (stringNumber = _i = 0, _len = _ref.length; _i < _len; stringNumber = ++_i) {
        compString = _ref[stringNumber];
        componentParts = compString.trim().split(',');
        if (componentParts.length !== 3) {
          return "string " + (stringNumber + 1) + ": data should be a list of strings \"component_id,component_name,responsible_account\"";
        } else {
          newComponents.push({
            id: componentParts[0],
            name: componentParts[1],
            responsible: componentParts[2]
          });
        }
      }
      this._settings.components = newComponents;
      return null;
    },
    storeComponentForNewTask: function(componentId, callback) {
      return taistApi.userData.set('componentForNewTask', componentId, function() {
        return callback();
      });
    },
    _deleteComponentForNewTask: function(callback) {
      return taistApi.userData["delete"]('componentForNewTask', function() {
        return callback();
      });
    },
    _getComponentForNewTask: function(callback) {
      return taistApi.userData.get('componentForNewTask', function(componentId) {
        return callback(componentId);
      });
    },
    assignComponentIfTaskJustCreated: function(taskId, callback) {
      return this._getComponentForNewTask((function(_this) {
        return function(componentId) {
          if (componentId != null) {
            return _this.assignComponentToTask(taskId, componentId, function() {
              return _this._deleteComponentForNewTask(function() {
                return callback();
              });
            });
          } else {
            return callback();
          }
        };
      })(this));
    },
    assignComponentToTask: function(taskId, componentId, callback) {
      return taistApi.companyData.setPart('assignedComponents', taskId, componentId, function() {
        return callback();
      });
    },
    getComponentForTask: function(taskId, callback) {
      return taistApi.companyData.getPart('assignedComponents', taskId, function(componentId) {
        return callback(componentId);
      });
    },
    getAssignedComponents: function(callback) {
      return taistApi.companyData.get('assignedComponents', function(assignedComponents) {
        return callback(assignedComponents);
      });
    }
  };
  issuesList = {
    _assignedComponents: null,
    _widget: null,
    _currentComponent: null,
    render: function() {
      return storage.getAssignedComponents((function(_this) {
        return function(assignedComponents) {
          _this._assignedComponents = assignedComponents;
          return taistApi.wait.elementRender('.issues-list', function() {
            _this._renderComponentFilter();
            return _this._filterIssuesByComponent();
          });
        };
      })(this));
    },
    _renderComponentFilter: function() {
      var sortingSelect;
      sortingSelect = $('.js-issues-sort');
      this._widget = $(this._widgetTemplate);
      this._componentsDropdown = componentsDropdown.create('github', {
        emptyComponentName: 'All',
        preserverEmptyComponent: true,
        caption: 'Comp.: '
      });
      this._componentsDropdown.renderTo(this._widget.find('.dropdownContainer'));
      sortingSelect.before(this._widget);
      this._componentsDropdown.setSelectedComponent(this._currentComponent);
      return this._componentsDropdown.onChange((function(_this) {
        return function(selectedComponent) {
          _this._currentComponent = selectedComponent;
          return _this._filterIssuesByComponent();
        };
      })(this));
    },
    _widgetTemplate: "<span class=\"componentFilterWidget\"><span class=\"dropdownContainer\"></span>\n</span>",
    _filterIssuesByComponent: function() {
      var issueDOM, issueId, jqIssue, _i, _len, _ref, _results;
      _ref = $('.issue-list-item');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        issueDOM = _ref[_i];
        issueId = issueDOM.id.substring('issue_'.length);
        jqIssue = $(issueDOM);
        if ((this._currentComponent != null) && this._assignedComponents[issueId] !== this._currentComponent) {
          _results.push(jqIssue.hide());
        } else {
          _results.push(jqIssue.show());
        }
      }
      return _results;
    }
  };
  githubUtils = {
    _settingsItemLinkClass: 'js-selected-navigation-item',
    _settingsTabContainerSelector: '.repo-settings-content',
    _settingsMenuSelector: '#repo-settings .menu',
    addSettingsItem: function(itemName, createTabContents) {
      return taistApi.wait.elementRender(this._settingsMenuSelector, (function(_this) {
        return function(menu) {
          var menuItem, menuItemClick;
          menuItemClick = function() {
            var containerSelector, newSettingsTab, partType, tabContents, _ref;
            newSettingsTab = _this._createSettingsItemTab(itemName);
            tabContents = createTabContents();
            _ref = {
              headerControls: '.boxed-group.boxed-group-action',
              innerContents: '.boxed-group-inner'
            };
            for (partType in _ref) {
              containerSelector = _ref[partType];
              (newSettingsTab.find(containerSelector)).append(tabContents[partType]);
            }
            return ($(_this._settingsTabContainerSelector)).empty().append(newSettingsTab);
          };
          menuItem = _this._createSettingsMenuItem(itemName, menuItemClick);
          return menu.append(menuItem);
        };
      })(this));
    },
    _createSettingsMenuItem: function(itemName, onSelected) {
      var newItem;
      newItem = $("<a></a>", {
        href: "#",
        text: itemName,
        click: (function(_this) {
          return function() {
            _this._switchSelectedMenuItemTo(newItem);
            onSelected();
            return false;
          };
        })(this)
      });
      newItem.addClass(this._settingsItemLinkClass);
      return ($('<li></li>')).append(newItem);
    },
    _switchSelectedMenuItemTo: function(newSelectedItem) {
      var previousSelectedLink, selectedClass;
      selectedClass = 'selected';
      previousSelectedLink = $("." + this._settingsItemLinkClass + "." + selectedClass);
      newSelectedItem.addClass(selectedClass);
      return previousSelectedLink.removeClass(selectedClass);
    },
    _createSettingsItemTab: function(itemName) {
      return $("<div class=\"tab-content\">\n    <div class=\"boxed-group\">\n      <span class=\"boxed-group boxed-group-action\">\n      </span>\n      <h3>" + itemName + "</h3>\n      <div class=\"boxed-group-inner\">\n      </div>\n    </div>\n</div>");
    },
    createDropdown: function(caption, listCaption, options) {
      var addOption, changeHandler, currentValue, dropdownContents, itemsByValues, itemsList, opt, self, _i, _len;
      dropdownContents = $(this._createDropdownFromTemplate(caption, listCaption));
      currentValue = null;
      changeHandler = null;
      itemsByValues = {};
      itemsList = dropdownContents.find('.select-menu-list');
      addOption = (function(_this) {
        return function(option) {
          var dropdownItem;
          dropdownItem = _this._createDropdownItemFromTemplate(option.name);
          dropdownItem.click(function() {
            currentValue = option.value;
            if (changeHandler != null) {
              return changeHandler();
            }
          });
          itemsByValues[option.value] = dropdownItem;
          return itemsList.append(dropdownItem);
        };
      })(this);
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        opt = options[_i];
        addOption(opt);
      }
      self = this;
      return {
        renderTo: function(container) {
          return container.append(dropdownContents);
        },
        getValue: function() {
          return currentValue;
        },
        setValue: window.setValue = function(newValue) {
          var dropdownOpenButton, menuContents;
          dropdownOpenButton = dropdownContents.find("." + self._dropdownOpenButtonClass);
          dropdownOpenButton.click();
          menuContents = dropdownContents.find("." + self._dropdownMenuContentsClass);
          menuContents.hide();
          return setTimeout((function() {
            itemsByValues[newValue].click();
            return menuContents.show();
          }), 0);
        },
        onChange: function(handler) {
          return changeHandler = (function(_this) {
            return function() {
              return handler(_this.getValue());
            };
          })(this);
        },
        addOption: addOption,
        removeOption: function(value) {
          return itemsByValues[value].remove();
        }
      };
    },
    _dropdownOpenButtonClass: 'minibutton',
    _dropdownMenuContentsClass: 'select-menu-modal',
    _createDropdownFromTemplate: function(caption, listCaption) {
      return "<div class=\"select-menu js-menu-container js-select-menu\">\n  <span class=\"" + this._dropdownOpenButtonClass + " select-menu-button js-menu-target\" role=\"button\" tabindex=\"0\" aria-haspopup=\"true\">\n    <i>" + caption + "</i>\n    <span class=\"js-select-button\"></span>\n  </span>\n\n  <div class=\"select-menu-modal-holder js-menu-content js-navigation-container\" aria-hidden=\"true\">\n\n    <div class=\"select-menu-modal\">\n      <div class=\"select-menu-header\">\n        <span class=\"select-menu-title\">" + listCaption + "</span>\n        <span class=\"octicon octicon-remove-close js-menu-close\"></span>\n      </div> <!-- /.select-menu-header -->\n\n      <div class=\"select-menu-list\">\n      </div>\n\n    </div> <!-- /.select-menu-modal -->\n  </div> <!-- /.select-menu-modal-holder -->\n</div>";
    },
    _createDropdownItemFromTemplate: function(name) {
      return $("<a class=\"select-menu-item js-navigation-open js-navigation-item\">\n  <span class=\"select-menu-item-icon octicon octicon-check\"></span>\n  <span class=\"select-menu-item-text js-select-button-text\">" + name + "</span>\n</a>");
    }
  };
  return {
    start: start
  };
});
